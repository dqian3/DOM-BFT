syntax = "proto3";
package dombft.proto;

message ClientRequest {
    uint32 client_id = 1;
    uint32 client_seq = 2;
    uint64 send_time = 3;
    bool is_write = 4;

    bytes req_data = 5;
}

message DOMRequest {
    int64  deadline = 1;
    int64  send_time = 2;
    uint32  proxy_id = 3;
    bool    late = 4;
    uint32  deadline_set_size = 5;

    uint32  client_id = 6; // repeat client_id here for convenience in breaking ties
    bytes   client_req = 7; // Bytes of Client Request + Signature
}

message MeasurementReply {
    uint32 receiver_id = 1;
    int32 owd = 2;
}    

message Reply {
    uint32 client_id = 1;
    uint32 client_seq = 2;

    // Tentative global ordering
    uint32 view = 3;
    uint32 seq = 4;

    uint32 replica_id = 5;
    bool fast = 6;
    bytes result = 7;
    bytes digest = 8;
}

message Cert {
    // A cert logically is a set of 2f + 1 replies
    
    // TODO to save space, we would only store 1 copy of each common field. Instead
    // we just repeat them here since it's easier
    repeated Reply replies    = 7;
    repeated bytes signatures = 8;
}


message CertReply {
    uint32 replica_id = 1;
    uint32 client_id = 2;
    uint32 client_seq = 3;

    bytes result = 7; 
}



// Dummy protocol message used for dummy implemenations of 
// Zyzzyva and PBFT
message DummyProto {
    uint32 replica_id = 1;
    uint32 replica_seq = 2;
    uint32 client_id = 3;
    uint32 client_seq = 4;
 
    uint32 stage = 5;
}


