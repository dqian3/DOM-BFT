syntax = "proto3";
package dombft.proto;

message ClientRequest {
    uint32 client_id = 1;
    uint32 client_seq = 2;
    uint64 send_time = 3;
    bool is_write = 4;

    bytes req_data = 5;
}

message DOMRequest {
    uint64  deadline = 1;
    uint32  proxy_id = 2;
    bool    late = 3
    uint32  deadline_set_size = 4
    bytes   client_req = 5; // Bytes of Client Request + Signature
}

message TimeStats {
    uint64 clienttime = 1;
    uint64 proxytime = 2;
    uint64 recvtime =3;
    uint64 fastreplytime = 4;
    uint64 slowreplytime= 5;
    uint64 deadline = 6;
}

message Reply {
    uint32 client_id = 1;
    uint32 client_seq = 2;

    // Tentative global ordering
    uint32 view = 3;
    uint32 seq = 4

    uint32 replica_id = 5;
    bool fast = 6
    bytes result = 6;
}

message IndexSync {
    uint32 logidbegin = 1;
    uint32 logidend = 2;
    repeated uint64 deadlines = 3;
    repeated uint64 reqkeys =4;
    uint32 view = 5;
    uint64 sendtime = 6;
}

message AskIndex {
    uint32 logidbegin = 1;
    uint32 logidend = 2;
    uint32 replicaid = 3;
}

message AskReq {
    repeated uint64 missedreqkeys = 1;
    uint32 replicaid = 2;
}

message MissedReq {
    repeated RequestBodyMsg reqs = 1;
    uint32 replicaid = 2;
}

message ViewChangeRequest{
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
}

message ViewChange {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    uint32 lastnormalview= 4;
    // In the algo, we should include the logs in the viewchange msg
    // But that is too large. As an implementation optimization, Let's use the following information, and later do state transfer to get the necessary entries
    uint32 syncpoint = 5; // for synced logs: the max synced log id, no need to add syncbegin, because it is always CONCURRENT_MAP_START_IDX
    uint32 unsynclogbegin = 6;
    uint32 unsynclogend = 7; 
}


message StateTransferRequest {
    uint32 view = 1;
    uint32 replicaid = 2;
    bool issynced = 3;
    uint32 logbegin = 4;
    uint32 logend = 5;
}


message StateTransferReply {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    bool issynced = 4;
    uint32 logbegin = 5;
    uint32 logend = 6;
    repeated RequestBodyMsg reqs = 7;
}


message StartView {
    uint32 view = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
    uint32 syncedlogid = 4;
}


message CrashVectorRequest {
    bytes nonce = 1;
    uint32 replicaid = 2;
}

message CrashVectorReply {
    bytes nonce = 1;
    uint32 replicaid = 2;
    repeated uint32 cv = 3;
}

message RecoveryRequest {
    repeated uint32 cv = 1;
    uint32 replicaid = 2;
}

message RecoveryReply {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 syncedlogid = 4;
}

message SyncStatusReport {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 syncedlogid = 4;
}

message CommitInstruction {
    uint32 view = 1;
    repeated uint32 cv = 2;
    uint32 replicaid = 3;
    uint32 committedlogid = 4;
}


